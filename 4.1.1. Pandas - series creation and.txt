4.1.1. Pandas - series creation and manipulation
import pandas as pd

# Take inputs from the user to create a list of numbers
numbers = list(map(int, input().split()))

# Create a Pandas series from the list of numbers
series = pd.Series(numbers)
# Grouping by even and odd numbers and calculating the mean
grouped = series.groupby(series % 2 == 0).mean()

# Display the mean of even and odd numbers with labels
grouped.index = ['Even' if is_even else 'Odd' for is_even in grouped.index]
print("Mean of even and odd numbers:")
print(grouped)



4.1.2. Dictionary to dataframe
import pandas as pd

# Provided dictionary of lists
data = {
    'Name': ['Alice', 'Bob', 'Charlie'],
    'Age': [25, 30, 35],
}

# Convert the dictionary to a DataFrame
df = pd.DataFrame(data)

# Display the original DataFrame
print("Original DataFrame:")
print(df)

# Adding a new row
new_name=input("New name: ")
new_age=int(input("New age: "))
new_row={'Name':new_name, 'Age':new_age}
df=pd.concat([df,pd.DataFrame([new_row])],ignore_index=True)
# Display the DataFrame after adding a new row
print("After adding a row:\n",df)

# Modifying a row
modify_index=int (input("Index of row to modify: ")) 
new_age_mod=int(input ("New age: "))
df.loc[modify_index,"Age"]=new_age_mod

# Display the DataFrame after modifying a row
print("After modifying a row:")
print(df)

# Deleting a row
delete_index=int(input("Index of row to delete: ")) 
df=df.drop(delete_index).reset_index(drop=True)
# Display the DataFrame after deleting a row
print("After deleting a row:")
print(df)

# Adding a new column

gender_input=input("Enter genders separated by space: ")
genders=gender_input.split()
df["Gender"]= genders
# Display the DataFrame after adding a new column
print("After adding a new column:")
print(df)

# Modifying a column
df["Name"]=df["Name"].str.upper()
# Display the DataFrame after modifying a column
print("After modifying a column:")
print(df)

# Deleting a column
df=df.drop(columns=['Age'])
# Display the DataFrame after deleting a column
print("After deleting a column:")
print(df)



4.1.3. Student Information
import pandas as pd

# Read the text file into a DataFrame
file = input()
data = pd.read_csv(file, sep="\s+", header=None, names=["Name", "Age", "Grade"])
print("First five rows:")
print(data.head())
avg=round(data["Age"].mean(),2)
print("Average age:",avg)

# write your code here..
filter=data[data['Grade']<='B']
print("Students with a grade up to B")
print(filter)


4.2.1. Month with the Highest Total Sales
import pandas as pd

# Prompt the user for the file name
file_name = input()

# Load the data
df = pd.read_csv(file_name)
df['Total_Sales']=df['Quantity']*df['Price']
df['Date']=pd.to_datetime(df['Date'])
df['Month']=df['Date'].dt.to_period('M')
Monthly_sales=df.groupby('Month')['Total_Sales'].sum()
best_month=Monthly_sales.idxmax()
highest_sales = Monthly_sales.max()
print(f"Best month: {best_month}")
print(f"Total sales: ${highest_sales:.2f}")




4.2.2. Best Selling Product
import pandas as pd

# Prompt the user for the file name
file_name = input()

# Load the data
df = pd.read_csv(file_name)


# Find the product with the highest total quantity sold
product_sales = df.groupby("Product")["Quantity"].sum()
best_product = product_sales.idxmax()
highest_quantity = product_sales.max()

# Display the result
print(f"Best selling product: {best_product}")
print(f"Total quantity sold: {highest_quantity}")


4.2.3. City that Sold the Most Products
import pandas as pd

# Prompt the user for the file name
file_name = input()

# Load the data
df = pd.read_csv(file_name)

# write the code..
city_sales = df.groupby("City")["Quantity"].sum()

# Find the city with the highest total quantity sold
best_city = city_sales.idxmax()
# Display the result
print(f"City sold the most products: {best_city}")



4.2.4. Most Frequently Sold Product Pairs
import pandas as pd
from itertools import combinations
from collections import Counter

# Prompt user to input the file name
file_name = input()

# Read data from the specified CSV file
df = pd.read_csv(file_name)

# write the code

grouped=df.groupby('Date')['Product'].apply(list)
product_combination=[]
for products in grouped:
	product_combination.extend(combinations(sorted(set(products)),2))
combinations_count=Counter(product_combination)
max_count=combinations_count.most_common(1)[0][1]
for combo , count in combinations_count.items():
	if count==max_count:
		print(f"{combo[0]} and {combo[1]}: {count} times")

# Output the most frequent product pairsd



4.2.5. Titanic Dataset Analysis and Data Cleaning
import pandas as pd
import numpy as np

# Load the Titanic dataset
data = pd.read_csv('Titanic-Dataset.csv')

# 1. Display the first 5 rows of the dataset
print(data.head())

# 2. Display the last 5 rows of the dataset
print(data.tail())

# 3. Get the shape of the dataset

print(data.shape)
# 4. Get a summary of the dataset (info)

print(data.info())
# 5. Get basic statistics of the dataset
print(data.describe())

# 6. Check for missing values
print(data.isnull().sum())

# 7. Fill missing values in the ‘Age’ column with the median age
data['Age'].fillna(data['Age'].median(),inplace=True)

# 8. Fill missing values in the ‘Embarked’ column with the mode
data['Embarked'].fillna(data['Embarked'].mode()[0],inplace=True)

# 9. Drop the ‘Cabin’ column due to many missing values

data.drop('Cabin',axis=1,inplace=True)
# 10. Create a new column 'FamilySize’ by adding ‘SibSp' and ‘Parch'
data['FamilySize']=data['SibSp']+data['Parch']





4.2.6. Titanic Dataset Analysis and Data Cleaning - 2
import pandas as pd
import numpy as np

# Load the Titanic dataset
data = pd.read_csv('Titanic-Dataset.csv')
data['FamilySize'] = data['SibSp'] + data['Parch']

# 1. Create a new column ‘IsAlone' (1 if alone, 0 otherwise)
data['IsAlone'] = np.where(data['FamilySize'] == 0, 1, 0)

# 2. Convert ‘Sex' to numeric (male: 0, female: 1)
data['Sex'] = data['Sex'].map({'male': 0, 'female': 1})

# 3. One-hot encode the ‘Embarked' column
data = pd.get_dummies(data, columns=['Embarked'])

# 4. Get the mean age of passengers
mean_age = data['Age'].mean()
print( mean_age)

# 5. Get the median fare of passengers
median_fare = data['Fare'].median()
print( median_fare)

# 6. Get the number of passengers by class
print( data['Pclass'].value_counts())

# 7. Get the number of passengers by gender
print( data['Sex'].value_counts())

# 8. Get the number of passengers by survival status
print( data['Survived'].value_counts())

# 9. Calculate the overall survival rate
survival_rate = data['Survived'].mean()
print(format(survival_rate))

# 10. Calculate the survival rate by gender
survival_by_gender = data.groupby('Sex')['Survived'].mean()
print( survival_by_gender)



4.2.7. Titanic Dataset Analysis and Data Cleaning - 3

import pandas as pd
import numpy as np

# Load the Titanic dataset
data = pd.read_csv('Titanic-Dataset.csv')
data['FamilySize'] = data['SibSp'] + data['Parch']
data['IsAlone'] = np.where(data['FamilySize'] > 0, 0, 1)
data = pd.get_dummies(data, columns=['Embarked'], drop_first=True)
# 1. Calculate the survival rate by class

print(data.groupby('Pclass')['Survived'].mean())
# 2. Calculate the survival rate by embarked location

print(data.groupby('Embarked_S')['Survived'].mean())
# 3. Calculate the survival rate by family size
print(data.groupby('FamilySize')['Survived'].mean())

# 4. Calculate the survival rate by being alone

print(data.groupby('IsAlone')['Survived'].mean())
# 5. Get the average fare by class
print(data.groupby('Pclass')['Fare'].mean())

# 6. Get the average age by class

print(data.groupby('Pclass')['Age'].mean())
# 7. Get the average age by survival status

print(data.groupby('Survived')['Age'].mean())
# 8. Get the average fare by survival status
print(data.groupby('Survived')['Fare'].mean())

# 9. Get the number of survivors by class

print(data[data['Survived']==1]['Pclass'].value_counts())
# 10. Get the number of non-survivors by class
print(data[data['Survived']==0]['Pclass'].value_counts())



4.2.8. Titanic Dataset Analysis and Data Cleaning - 4


